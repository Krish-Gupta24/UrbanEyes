generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  fullName     String
  password     String
  role         UserRole      @default(REGULAR)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bookings     Booking[]
  slips        ParkingSlip[]
  parkingSpots ParkingSpot[]
}

model ParkingSpot {
  id           String        @id @default(cuid())
  title        String
  description  String?
  address      String
  latitude     Float
  longitude    Float
  pricePerHour Float
  isAvailable  Boolean       @default(true)
  ownerId      String
  totalSpots   Int           @default(0)
  occupiedSpots Int          @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bookings     Booking[]
  slips        ParkingSlip[]
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}


model Booking {
  id            String       @id @default(cuid())
  startTime     DateTime
  endTime       DateTime
  totalPrice    Float
  status        String       @default("ACTIVE")
  customerName  String
  customerEmail String
  customerPhone String?
  carNumber     String?
  parkingSpotId String
  ownerId       String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  owner         User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  parkingSpot   ParkingSpot  @relation(fields: [parkingSpotId], references: [id], onDelete: Cascade)
  slip          ParkingSlip?
}

model ParkingSlip {
  id            String      @id @default(cuid())
  slipNumber    String      @unique
  qrCode        String
  status        String      @default("ACTIVE")
  validUntil    DateTime
  bookingId     String?     @unique
  parkingSpotId String
  ownerId       String
  carNumber     String?
  revenue       Float?      @default(0)
  completedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  booking       Booking?    @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  owner         User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  parkingSpot   ParkingSpot @relation(fields: [parkingSpotId], references: [id], onDelete: Cascade)
}

enum UserRole {
  REGULAR
  OWNER
}
