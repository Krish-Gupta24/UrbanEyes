// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}
// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

// This enum defines the possible account types for a user.
enum UserRole {
  REGULAR
  OWNER
}

// This model represents a user in your database.
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  fullName  String
  password  String
  role      UserRole @default(REGULAR)

  // Relations
  parkingSpots ParkingSpot[]
  bookings     Booking[]
  slips        ParkingSlip[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Parking spot model
model ParkingSpot {
  id          String   @id @default(cuid())
  title       String
  description String?
  address     String
  latitude    Float
  longitude   Float
  pricePerHour Float
  isAvailable Boolean  @default(true)
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Relations
  bookings Booking[]
  slips    ParkingSlip[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Booking model
model Booking {
  id            String   @id @default(cuid())
  startTime     DateTime
  endTime       DateTime
  totalPrice    Float
  status        String   @default("ACTIVE") // ACTIVE, COMPLETED, CANCELLED
  customerName  String
  customerEmail String
  customerPhone String?
  
  // Relations
  parkingSpotId String
  parkingSpot   ParkingSpot @relation(fields: [parkingSpotId], references: [id], onDelete: Cascade)
  ownerId       String
  owner         User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  slip          ParkingSlip?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Parking slip model
model ParkingSlip {
  id          String   @id @default(cuid())
  slipNumber  String   @unique
  qrCode      String   // Base64 encoded QR code
  status      String   @default("ACTIVE") // ACTIVE, EXPIRED, USED
  validUntil  DateTime
  
  // Relations
  bookingId   String   @unique
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  parkingSpotId String
  parkingSpot   ParkingSpot @relation(fields: [parkingSpotId], references: [id], onDelete: Cascade)
  ownerId       String
  owner         User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

